import Head from 'next/head'
import Image from 'next/image'
import { Inter } from '@next/font/google'
import styles from '../styles/Home.module.css'
import Link from "next/link";
import { Server } from '../types/Server';
import { useEffect, useState } from 'react';
import { AiFillStar, AiOutlineStar } from "react-icons/ai";

const inter = Inter({ subsets: ['latin'] })
import bg from '../public/background-server-winter.jpg'
import FavoriteStar from '../components/FavoriteStar';
import { ServerSettings } from '../types/ServerSettings';

export default function Home() {


    const [servers, setServers] = useState<Server[] | null>(null)


    function getServers() {

        fetch('https://panel.simrail.eu:8084/servers-open')
            .then((res) => res.json())
            .then((stations) => {

                let serversData: Server[] = stations.data

                serversData = serversData
                    .filter(e => e.ServerCode.startsWith('fr'))
                    .concat(
                        serversData
                            .filter(e => !e.ServerCode.startsWith('fr'))
                            .sort((a, b) => a.ServerCode.localeCompare(b.ServerCode))
                    );

                serversData = serversData
                    .sort(function (a, b) {
                        let serverSettings1 = (JSON.parse(localStorage.getItem('server-' + a.id) ?? '{}') ?? { favorite: false }).favorite;
                        let serverSettings2 = (JSON.parse(localStorage.getItem('server-' + b.id) ?? '{}') ?? { favorite: false }).favorite;

                        return serverSettings1 - serverSettings2
                    })

                setServers(serversData)
            })
    }



    useEffect(() => {
        // setLoading(true)

        getServers()

        const interval = setInterval(() => {
            getServers()
        }, 10000)


        return () => clearInterval(interval)

    }, [])


    const getStatusIndicatorStyle = (server: Server) => {
        if (server.IsActive) return styles.online;
        else return styles.offline;
    };

    return (<>
        <Head>
            <title>Create Next App</title>
            <meta name="description" content="Generated by create next app" />
            <meta name="viewport" content="width=device-width, initial-scale=1" />
            <link rel="icon" href="/favicon.ico" />
        </Head>
        <main className={styles.main}>
            <h1>Select your server</h1>
            {!servers && 'Loading servers...'}
            <div className={styles.serverList}>

                {/* {servers ? 'a' : 'b'} */}
                {servers && servers.map((server: Server) => <>
                    <Link
                        id={server.ServerCode}
                        className={styles.server}
                        key={server.id}
                        href={"/server/" + server.ServerCode}>
                        <FavoriteStar server={server} />
                        <span className={`${styles.statusIndicator} ${getStatusIndicatorStyle(server)}`}></span>
                        <span className={styles.serverName}>{server.ServerName}</span>
                    </Link>
                </>
                )
                }
            </div>
        </main>
    </>)
}
